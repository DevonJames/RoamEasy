---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---
Update this rule if user requested changes to the project requirement, etc.
# Backend Structure Document for RoamEasy

This document outlines the backend architecture, database design, APIs, hosting, infrastructure, security, and maintenance strategies for the RoamEasy mobile app. It is written in clear, everyday language so anyone can understand how the backend is set up and why.

## 1. Backend Architecture

### Overall Design

*   **Three-tier structure**: mobile client → API layer (Edge Functions/REST) → managed database
*   **Serverless approach**: we use Supabase Edge Functions (Deno) for custom logic and Supabase's auto-generated REST endpoints for standard CRUD
*   **Microservice flavor**: each major feature (route planning, resort suggestions, calendar export) lives in its own function or endpoint

### Frameworks & Patterns

*   **Supabase** for database, authentication, file storage, and edge functions
*   **RESTful API** design (leveraging PostgREST) with a few custom endpoints for AI calls and calendar exports
*   **Singleton pattern** for shared services (API clients for Google Maps, OpenAI, ElevenLabs)
*   **Adapter layer** in each function to translate between Supabase data and third-party APIs

### Scalability, Maintainability & Performance

*   **Auto-scaling** of edge functions: handles spikes in activity without manual intervention
*   **Managed Postgres** with read replicas available for heavy read loads (e.g., frequent resort lookups)
*   **Separation of concerns**: business logic lives in functions, data storage logic lives in database
*   **Cold-start minimization**: edge functions are lightweight and kept warm via Supabase's infrastructure

## 2. Database Management

### Technologies Used

*   **Type**: Relational (SQL)
*   **System**: PostgreSQL managed by Supabase
*   **Authentication & Authorization**: Supabase Auth (JWT), Row Level Security (RLS) policies

### Data Storage & Access

*   **Normalized schema** with JSONB fields for flexible user preferences
*   **CRUD via PostgREST**: automatic REST endpoints for all tables
*   **Custom business logic** in edge functions for multi-step processes (AI calls, calendar export)
*   **Backup & replication** configured by Supabase (daily snapshots, PITR)

## 3. Database Schema

Below is a human-readable overview and accompanying SQL definitions for our main tables.

### Tables & Relationships (Human Readable)

*   **users**: core login records (email, social logins), linked 1:1 to user_profiles
*   **user_profiles**: user's personal details and role flags (guest vs. registered)
*   **preferences**: each user's vehicle, cost, hookup, pet, and scenery preferences in a JSON field
*   **trips**: saved itineraries with name, creation date, and owner
*   **trip_stops**: individual stops linked to a trip, with order, check-in & out times, user notes
*   **resorts**: cached resort metadata (name, location, ratings, amenities, contact info)
*   **calendar_exports**: records of exported events (Google, iCloud, iCal) and their external IDs
*   **notifications**: scheduled reminders tied to trips or stops, with send status
*   **subscriptions**: user's freemium or paid plan details

### SQL Schema (PostgreSQL)

`-- Users and Profiles
table users (
  id uuid primary key,
  email text unique not null,
  created_at timestamp default now()
);

table user_profiles (
  user_id uuid references users(id),
  full_name text,
  is_guest boolean default false,
  created_at timestamp default now(),
  primary key(user_id)
);

-- Preferences
table preferences (
  id serial primary key,
  user_id uuid references users(id),
  data jsonb not null,
  updated_at timestamp default now()
);

-- Trips and Stops
table trips (
  id uuid primary key,
  user_id uuid references users(id),
  name text,
  route_polyline text, -- Stores the encoded polyline for the route map visualization
  created_at timestamp default now(),
  updated_at timestamp default now()
);

table trip_stops (
  id uuid primary key,
  trip_id uuid references trips(id),
  resort_id uuid references resorts(id),
  stop_order int,
  check_in date,
  check_out date,
  notes text
);

-- Resorts Cache
table resorts (
  id uuid primary key,
  name text,
  address text,
  latitude numeric,
  longitude numeric,
  rating numeric,
  amenities jsonb,
  phone text,
  website text,
  last_updated timestamp default now()
);

-- Calendar Exports
table calendar_exports (
  id uuid primary key,
  trip_id uuid references trips(id),
  service text, -- 'google','icloud','ical'
  external_event_ids jsonb,
  exported_at timestamp default now()
);

-- Notifications
table notifications (
  id uuid primary key,
  user_id uuid references users(id),
  trip_id uuid references trips(id),
  event_time timestamp,
  notify_at timestamp,
  type text,
  sent boolean default false
);

-- Subscriptions
table subscriptions (
  id uuid primary key,
  user_id uuid references users(id),
  plan text,
  status text,
  started_at timestamp,
  ends_at timestamp
);`

## 4. API Design and Endpoints

All endpoints expect a valid JWT in the `Authorization` header except guest routes.

### Authentication & Profiles

*   `POST /auth/sign-up` → email/password or social login
*   `POST /auth/sign-in` → returns JWT
*   `GET /profiles/me` → fetch user profile & preferences
*   `PUT /profiles/me` → update personal info

### Preferences

*   `GET /preferences` → load JSON preferences
*   `PUT /preferences` → overwrite or merge preference JSON

### Trip Management

*   `GET /trips` → list user's trips (includes basic details, not full stops or polyline)
*   `POST /trips` → create a new trip stub (name, user_id only; route planned separately)
*   `GET /trips/{tripId}` → fetch full trip details, including stops and `route_polyline`
*   `PUT /trips/{tripId}` → rename or update basic trip info
*   `DELETE /trips/{tripId}` → remove a trip

### Stop Management

*   `GET /trips/{tripId}/stops`
*   `POST /trips/{tripId}/stops` → add a stop
*   `PUT /trips/{tripId}/stops/{stopId}` → reorder, edit notes, change dates
*   `DELETE /trips/{tripId}/stops/{stopId}`

### Resort Suggestions & Routing

*   `POST /resorts/search` → payload: start/end, max drive/day, scenery, vehicle size • triggers OpenAI + Google Maps/ORS calls • returns list of candidate stops with resort IDs and the `route_polyline` for the generated trip, saving it to the trip record.

### Calendar Export

*   `POST /trips/{tripId}/export/google`
*   `POST /trips/{tripId}/export/icloud`
*   `POST /trips/{tripId}/export/ical` • each returns a link or file reference for the client to import

### Notifications

*   `GET /notifications` → upcoming reminders
*   `POST /notifications/schedule` → set or update reminders
*   `DELETE /notifications/{notificationId}`

## 5. Hosting Solutions

*   **Supabase Cloud**: managed Postgres, Auth, Storage, Edge Functions • Hosted across multiple regions with built-in failover • Pay-as-you-go pricing, auto-scaling resources
*   **Edge Functions**: Deno runtime, low-latency global execution for custom logic

## 6. Infrastructure Components

*   **Load Balancer & API Gateway**: handled by Supabase's front door
*   **Caching**: • Postgres read replicas for heavy read traffic (resort lookups) • CDN for any static files (e.g., exported .ics files via Storage)
*   **Third-party integrations**: • Google Maps / OpenRouteService for routing • OpenAI GPT-4-turbo for preference parsing and resort scoring • ElevenLabs for voiceover support (handled inside edge function or client)
*   **Storage**: Supabase Storage for any generated files or long-term cache dumps

## 7. Security Measures

*   **Authentication & Authorization**: • JWT tokens via Supabase Auth • Row-Level Security policies on every table
*   **Data Encryption**: • TLS in transit • AES-256 at rest (managed by Supabase)
*   **Input Validation & Sanitization** in edge functions to prevent injection
*   **Rate Limiting** at function level for AI and routing endpoints
*   **Compliance**: • GDPR and CCPA support via data export/deletion endpoints

## 8. Monitoring and Maintenance

*   **Logs & Metrics**: built-in Supabase dashboard for database and edge function metrics
*   **Error Tracking**: Sentry or Logflare linked to edge functions
*   **Backups & Recovery**: daily snapshots, point-in-time recovery configured by Supabase
*   **Schema Migrations**: managed via Supabase Migrations CLI
*   **Routine Tasks**: • Clean up old notifications and calendar exports weekly • Refresh resort cache monthly

## 9. Conclusion and Overall Backend Summary

The RoamEasy backend uses a serverless, managed approach centered on Supabase to provide secure, scalable, and cost-effective data services. Key features include:

*   A clean, RESTful API with custom edge functions for AI-driven resort suggestions and calendar exports
*   A solid, relational PostgreSQL schema with JSON flexibility for user preferences
*   Global execution via edge functions for low latency and easy scaling
*   Strong security through JWT auth, RLS policies, and encryption

This setup aligns with RoamEasy's goals of fast development, reliability for RV travelers, and the flexibility to add more AI-powered features in the future.
